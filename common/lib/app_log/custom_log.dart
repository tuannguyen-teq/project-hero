import 'dart:convert';
import 'dart:developer';

import 'package:logger/logger.dart';

final logger = Logger(
  printer: CustomPrettyPrinter(),
  output: CustomLogOutput()
);


class CustomLogOutput extends LogOutput {

  @override
  void output(OutputEvent event) {
    event.lines.forEach(log);
  }
}


class CustomPrettyPrinter extends LogPrinter {
  static const topLeftCorner = '‚îå';
  static const bottomLeftCorner = '‚îî';
  static const middleCorner = '‚îú';
  static const verticalLine = '‚îÇ';
  static const doubleDivider = '‚îÄ';
  static const singleDivider = '‚îÑ';
  static const padLeft = 4;

  static final levelPrefix = {
    Level.debug: 'DEBUG'.padLeft(padLeft),
    Level.info: 'INFO'.padLeft(padLeft),
    Level.warning: 'WARNING'.padLeft(padLeft),
    Level.error: 'ERROR'.padLeft(padLeft),
  };

  static final levelEmojis = {
    Level.debug: 'üêõ ',
    Level.info: 'üí° ',
    Level.warning: '‚ö†Ô∏è ',
    Level.error: '‚õî ',
  };

  /// Matches a stacktrace line as generated on Android/iOS devices.
  /// For example:
  /// #1      Logger.log (package:logger/src/logger.dart:115:29)
  static final _deviceStackTraceRegex = RegExp(r'#[0-9]+\s+(.+) \((\S+)\)');

  /// Matches a stacktrace line as generated by Flutter web.
  /// For example:
  /// packages/logger/src/printers/pretty_printer.dart 91:37
  static final _webStackTraceRegex = RegExp(r'^((packages|dart-sdk)\/\S+\/)');

  /// Matches a stacktrace line as generated by browser Dart.
  /// For example:
  /// dart:sdk_internal
  /// package:logger/src/logger.dart
  static final _browserStackTraceRegex = RegExp(r'^(?:package:)?(dart:\S+|\S+)');

  static DateTime? _startTime;

  /// The index which to begin the stack trace at
  ///
  /// This can be useful if, for instance, Logger is wrapped in another class and
  /// you wish to remove these wrapped calls from stack trace
  final int stackTraceBeginIndex;
  final int methodCount;
  final int infoMethodCount;
  final int errorMethodCount;
  final int lineLength;
  final bool colors;
  final bool printEmojis;
  final bool printTime;

  String _topBorder = '';
  String _middleBorder = '';
  String _bottomBorder = '';

  CustomPrettyPrinter({
    this.stackTraceBeginIndex = 0,
    this.methodCount = 2,
    this.infoMethodCount = 0,
    this.errorMethodCount = 8,
    this.lineLength = 120,
    this.colors = true,
    this.printEmojis = true,
    this.printTime = false,
  }) {
    _startTime ??= DateTime.now();

    var doubleDividerLine = StringBuffer();
    var singleDividerLine = StringBuffer();
    for (var i = 0; i < lineLength - 1; i++) {
      doubleDividerLine.write(doubleDivider);
      singleDividerLine.write(singleDivider);
    }

    _topBorder = '$topLeftCorner$doubleDividerLine';
    _middleBorder = '$middleCorner$singleDividerLine';
    _bottomBorder = '$bottomLeftCorner$doubleDividerLine';
  }

  @override
  List<String> log(LogEvent event) {
    var messageStr = stringifyMessage(event.message);

    String? stackTraceStr;
    if (event.level == Level.info) {
      if (infoMethodCount > 0) {
        stackTraceStr = formatStackTrace(StackTrace.current, infoMethodCount);
      }
    } else {
      if (event.stackTrace == null) {
        if (methodCount > 0) {
          stackTraceStr = formatStackTrace(StackTrace.current, methodCount);
        }
      } else if (errorMethodCount > 0) {
        stackTraceStr = formatStackTrace(event.stackTrace, errorMethodCount);
      }
    }

    var errorStr = event.error?.toString();

    String? timeStr;
    if (printTime) {
      timeStr = getTime();
    }

    return _formatAndPrint(
      event.level,
      messageStr,
      timeStr,
      errorStr,
      stackTraceStr,
    );
  }

  String? formatStackTrace(StackTrace? stackTrace, int methodCount) {
    var lines = stackTrace.toString().split('\n');
    if (stackTraceBeginIndex > 0 && stackTraceBeginIndex < lines.length - 1) {
      lines = lines.sublist(stackTraceBeginIndex);
    }
    var formatted = <String>[];
    var count = 0;
    for (var line in lines) {
      if (_discardDeviceStacktraceLine(line) ||
          _discardWebStacktraceLine(line) ||
          _discardBrowserStacktraceLine(line) ||
          line.isEmpty) {
        continue;
      }
      formatted.add('#$count   ${line.replaceFirst(RegExp(r'#\d+\s+'), '')}');
      if (++count == methodCount) {
        break;
      }
    }

    if (formatted.isEmpty) {
      return null;
    } else {
      return formatted.join('\n');
    }
  }

  bool _discardDeviceStacktraceLine(String line) {
    var match = _deviceStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(2)!.startsWith('package:logger');
  }

  bool _discardWebStacktraceLine(String line) {
    var match = _webStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(1)!.startsWith('packages/logger') ||
        match.group(1)!.startsWith('dart-sdk/lib');
  }

  bool _discardBrowserStacktraceLine(String line) {
    var match = _browserStackTraceRegex.matchAsPrefix(line);
    if (match == null) {
      return false;
    }
    return match.group(1)!.startsWith('package:logger') || match.group(1)!.startsWith('dart:');
  }

  String getTime() {
    String threeDigits(int n) {
      if (n >= 100) return '$n';
      if (n >= 10) return '0$n';
      return '00$n';
    }

    String twoDigits(int n) {
      if (n >= 10) return '$n';
      return '0$n';
    }

    var now = DateTime.now();
    var h = twoDigits(now.hour);
    var min = twoDigits(now.minute);
    var sec = twoDigits(now.second);
    var ms = threeDigits(now.millisecond);
    var timeSinceStart = now.difference(_startTime!).toString();
    return '$h:$min:$sec.$ms (+$timeSinceStart)';
  }

  String stringifyMessage(dynamic message) {
    if (message is Map || message is Iterable) {
      var encoder = const JsonEncoder.withIndent('  ');
      return encoder.convert(message);
    } else {
      return message.toString();
    }
  }

  String _getLevelColor(Level level, String content) {
    late final String prefix;
    if (colors) {
      prefix = levelPrefix[level]!;
    } else {
      prefix = '';
    }
    return '$prefix$content';
  }

  String _getErrorColor(Level level, String content) {
    late final String prefix;
    if (colors) {
      prefix = levelPrefix[Level.error]!;
    } else {
      prefix = '';
    }
    return '$prefix$content';
  }

  String _getEmoji(Level level) {
    if (printEmojis) {
      return levelEmojis[level]!;
    } else {
      return '';
    }
  }

  List<String> _formatAndPrint(
    Level level,
    String message,
    String? time,
    String? error,
    String? stacktrace,
  ) {
    // This code is non trivial and a type annotation here helps understanding.
    // ignore: omit_local_variable_types
    List<String> buffer = [];
    buffer.add(_getLevelColor(level, _topBorder));

    if (error != null) {
      for (var line in error.split('\n')) {
        buffer.add(_getLevelColor(level, '$verticalLine ') + _getErrorColor(level, line));
      }
      buffer.add(_getLevelColor(level, _middleBorder));
    }

    if (stacktrace != null) {
      for (var line in stacktrace.split('\n')) {
        buffer.add(_getLevelColor(level, '$verticalLine $line'));
      }
      buffer.add(_getLevelColor(level, _middleBorder));
    }

    if (time != null) {
      buffer
        ..add(_getLevelColor(level, '$verticalLine $time'))
        ..add(_getLevelColor(level, _middleBorder));
    }

    var emoji = _getEmoji(level);
    for (var line in message.split('\n')) {
      buffer.add(_getLevelColor(level, '$verticalLine $emoji$line'));
    }
    buffer.add(_getLevelColor(level, _bottomBorder));

    return buffer;
  }
}